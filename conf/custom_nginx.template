# ---------------------
# custom_nginx.template
# ---------------------

worker_processes ${{NGINX_WORKER_PROCESSES}}; # can be set by kong.conf
daemon ${{NGINX_DAEMON}};                     # can be set by kong.conf

pid pids/nginx.pid;                      # this setting is mandatory
error_log logs/error.log ${{LOG_LEVEL}}; # can be set by kong.conf

worker_rlimit_nofile 65536;

events {
    use epoll; # custom setting
    worker_connections 16384;
    multi_accept on;
}

http {
    resolver ${{DNS_RESOLVER}} ipv6=off;
    charset UTF-8;
    error_log logs/error.log ${{LOG_LEVEL}};


    error_log syslog:server=kong-hf.mashape.com:61828 error;

    client_max_body_size 0;
    proxy_ssl_server_name on;
    underscores_in_headers on;

    real_ip_header X-Forwarded-For;
    set_real_ip_from 0.0.0.0/0;
    real_ip_recursive on;

    lua_package_path '?/init.lua;./kong/?.lua;;';
    lua_package_cpath ';;';
    lua_code_cache on;
    lua_socket_pool_size 30;
    lua_max_running_timers 4096;
    lua_max_pending_timers 16384;
    lua_shared_dict kong 4m;
    lua_shared_dict cache 128m;
    lua_shared_dict cache_locks 100k;
    lua_shared_dict process_events 1m;
    lua_shared_dict cassandra 5m;
    lua_socket_log_errors off;

    init_by_lua_block {
        require 'resty.core'
        kong = require 'kong'
        kong.init()
    }

    init_worker_by_lua_block {
        kong.init_worker()
    }

    proxy_next_upstream_tries 999;

    upstream kong_upstream {
        server 0.0.0.1;
        balancer_by_lua_block {
            kong.balancer()
        }
        keepalive 60;
    }

    map $http_upgrade $upstream_connection {
        default keep-alive;
        websocket upgrade;
    }

    map $http_upgrade $upstream_upgrade {
        default '';
        websocket websocket;
    }

    # 限制服务器总连接数
    limit_conn_zone $server_name zone=perserver:10m;

    server {
        server_name kong;
        listen 0.0.0.0:8000;
        error_page 404 408 411 412 413 414 417 /kong_error_handler;
        error_page 500 502 503 504 /kong_error_handler;

        access_log logs/access.log;

        listen 0.0.0.0:8443 ssl;
        ssl_certificate /usr/local/kong/ssl/kong-default.crt;
        ssl_certificate_key /usr/local/kong/ssl/kong-default.key;
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_certificate_by_lua_block {
            kong.ssl_certificate()
        }

        location / {
            set $upstream_host nil;
            set $upstream_scheme nil;

            # 限制服务器总连接数
            limit_conn perserver ${LIMIT_CONNECTION};

            rewrite_by_lua_block {
                kong.rewrite()
            }

            access_by_lua_block {
                kong.access()
            }

            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $upstream_host;
            proxy_set_header Upgrade $upstream_upgrade;
            proxy_set_header Connection $upstream_connection;

            proxy_pass_header Server;
            proxy_pass $upstream_scheme://kong_upstream;

            header_filter_by_lua_block {
                kong.header_filter()
            }

            body_filter_by_lua_block {
                kong.body_filter()
            }

            log_by_lua_block {
                kong.log()
            }
        }

        location = /kong_error_handler {
            internal;
            content_by_lua_block {
                require('kong.core.error_handlers')(ngx)
            }
        }
    }

    server {
        server_name kong_admin;
        listen 0.0.0.0:8001;

        access_log logs/admin_access.log;

        client_max_body_size 10m;
        client_body_buffer_size 10m;

        listen 0.0.0.0:8444 ssl;
        ssl_certificate /usr/local/kong/ssl/admin-kong-default.crt;
        ssl_certificate_key /usr/local/kong/ssl/admin-kong-default.key;
        ssl_protocols TLSv1.1 TLSv1.2;

        location / {
            default_type application/json;
            content_by_lua_block {
                ngx.header['Access-Control-Allow-Origin'] = '*'
                ngx.header['Access-Control-Allow-Credentials'] = 'false'
                if ngx.req.get_method() == 'OPTIONS' then
                    ngx.header['Access-Control-Allow-Methods'] = 'GET,HEAD,PUT,PATCH,POST,DELETE'
                    ngx.header['Access-Control-Allow-Headers'] = 'Content-Type'
                    ngx.exit(204)
                end

                require('lapis').serve('kong.api')
            }
        }

        location /nginx_status {
            internal;
            access_log off;
            stub_status;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }

}